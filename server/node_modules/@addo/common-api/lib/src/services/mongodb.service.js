"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoDBService = void 0;
const typy_1 = require("typy");
const _ = __importStar(require("lodash"));
const mongodb_1 = require("mongodb");
const mongodb_utils_1 = require("../utils/mongodb.utils");
const http_error_1 = require("../utils/http.error");
const specialOps = {
    $addToSet: (key, value) => {
        let $addToSet = {};
        $addToSet[key] = value;
        return { $addToSet };
    },
    $push: (key, value) => {
        let $push = {};
        $push[key] = value;
        return { $push };
    },
    $pop: (key, value) => {
        let $pop = {};
        $pop[key] = value;
        return { $pop };
    },
    $pull: (key, value) => {
        let $pull = {};
        $pull[key] = value;
        return { $pull };
    },
};
class MongoDBService {
    constructor(connectionPool) {
        this.connectionPool = connectionPool;
        this.exclude_fields = [];
        this.includes = {};
        this.sorts = {};
        this.pre_include = [];
        this.private_fields = [];
        this.CRUD_CONFIG = {
            exclude: {
                update: ["created"],
                isToBeSkipped: (path, op) => {
                    return (this.CRUD_CONFIG.exclude[op].find((u) => {
                        u = u.indexOf(".*") > -1 ? u.replace(".*", "") : u;
                        return path.indexOf(u) > -1;
                    }) != null);
                },
            },
        };
    }
    async find(filter, skip, take, fields, orderBy, includes = [], ctx = {}) {
        let client = await this.connectionPool.connectToDatabase(process.env.MONGODB_CONNECTION_STRING);
        let aggregate = this.getAggregate(filter, includes, orderBy, ctx || {});
        return await client
            .db()
            .collection(this.collection)
            .aggregate(aggregate)
            .sort(orderBy)
            .skip(skip)
            .limit(take)
            .project(mongodb_utils_1.MongoDbUtils.parseFields(fields, this.private_fields))
            .toArray()
            .then((res) => {
            for (let r of res) {
                this.transform(r);
            }
            return res;
        })
            .catch((err) => {
            throw new http_error_1.HttpError(err.message, err, 500);
        });
    }
    async findById(id, fields, includes = [], ctx = {}) {
        let client = await this.connectionPool.connectToDatabase(process.env.MONGODB_CONNECTION_STRING);
        let aggregate = [{ $match: { _id: new mongodb_1.ObjectId(id) } }];
        this.addIncludes(aggregate, includes, ctx || {});
        return await client
            .db()
            .collection(this.collection)
            .aggregate(aggregate)
            .project(mongodb_utils_1.MongoDbUtils.parseFields(fields, this.private_fields))
            .toArray()
            .then((res) => {
            if (res[0]) {
                res[0] = this.transform(res[0]);
            }
            return res[0];
        })
            .catch((err) => {
            throw new http_error_1.HttpError(err.message, err, 500);
        });
    }
    async findOne(filter, fields, includes = [], ctx = {}) {
        let aggregate = this.getAggregate(filter, includes, {}, ctx || {});
        let client = await this.connectionPool.connectToDatabase(process.env.MONGODB_CONNECTION_STRING);
        return await client
            .db()
            .collection(this.collection)
            .aggregate(aggregate)
            .skip(0)
            .limit(1)
            .project(mongodb_utils_1.MongoDbUtils.parseFields(fields, this.private_fields))
            .toArray()
            .then((res) => {
            if (res[0]) {
                res[0] = this.transform(res[0]);
            }
            return res[0];
        })
            .catch((err) => {
            throw new http_error_1.HttpError(err.message, err, 500);
        });
    }
    async add(entity) {
        let client = await this.connectionPool.connectToDatabase(process.env.MONGODB_CONNECTION_STRING);
        let collection = await client.db().collection(this.collection);
        try {
            let result = await collection.insertOne(entity);
            return collection
                .findOne({ _id: result.insertedId })
                .then((res) => {
                if (res) {
                    res = this.transform(res);
                }
                return res;
            })
                .catch((err) => {
                throw new http_error_1.HttpError(err.message, err, 500);
            });
        }
        catch (err) {
            throw new http_error_1.HttpError(err.message, err, 500);
        }
    }
    async updateFromId(entity, updateFields, fields, ctx = {}) {
        let client = await this.connectionPool.connectToDatabase(process.env.MONGODB_CONNECTION_STRING);
        let collection = await client.db().collection(this.collection);
        let $update = {};
        let $set = {};
        updateFields = updateFields.replace(/,/g, " ");
        fields = fields.replace(/,/g, " ");
        for (let field of updateFields.split(" ")) {
            if (this.CRUD_CONFIG.exclude.isToBeSkipped(field, "update"))
                continue;
            if (field[0] == "$") {
                let matches = field.split(":");
                let key = matches[1];
                let value = _.get(entity, key);
                if (matches[2] && matches[2][0] == ".") {
                    value = ctx[matches[2].replace(".", "")];
                }
                Object.assign($update, specialOps[matches[0]](key, value));
                console.log("Special update data: ", {
                    matches,
                    key,
                    value,
                    $set,
                    ctx,
                });
                continue;
            }
            _.set($set, field, typy_1.t(entity, field).safeObject);
        }
        if (Object.keys($set).length > 0) {
            $update.$set = $set;
        }
        return collection
            .findOneAndUpdate({ _id: new mongodb_1.ObjectId(entity.id) }, $update, {
            projection: mongodb_utils_1.MongoDbUtils.parseFields(fields, this.private_fields),
        })
            .then((result) => {
            let res = result.value;
            if (res) {
                res = this.transform(res);
            }
            return res;
        })
            .catch((err) => {
            throw new http_error_1.HttpError(err.message, err, 500);
        });
    }
    async updateOne(filter, $update, fields, ctx = {}) {
        let client = await this.connectionPool.connectToDatabase(process.env.MONGODB_CONNECTION_STRING);
        let collection = await client.db().collection(this.collection);
        return collection
            .findOneAndUpdate(filter, $update, {
            projection: mongodb_utils_1.MongoDbUtils.parseFields(fields, this.private_fields),
        })
            .then((result) => {
            let res = result.value;
            if (res) {
                res = this.transform(res);
            }
            return res;
        })
            .catch((err) => {
            throw new http_error_1.HttpError(err.message, err, 500);
        });
    }
    async updateMany(conditions, entity, updateFields, fields) {
        let client = await this.connectionPool.connectToDatabase(process.env.MONGODB_CONNECTION_STRING);
        let collection = await client.db().collection(this.collection);
        let $set = {};
        updateFields = updateFields.replace(/,/g, " ");
        fields = fields.replace(/,/g, " ");
        for (let field of updateFields.split(" ")) {
            if (this.CRUD_CONFIG.exclude.isToBeSkipped(field, "update"))
                continue;
            if (field[0] == "$") {
                let specialOp = field.split(":")[0];
                let key = field.split(":")[1];
                Object.assign($set, specialOps[specialOp](key, _.get(entity, key)));
                continue;
            }
            _.set($set, field, typy_1.t(entity, field).safeObject);
        }
        return collection
            .updateMany(conditions, { $set })
            .then((result) => {
            let res = result.result;
            return res;
        })
            .catch((err) => {
            throw new http_error_1.HttpError(err.message, err, 500);
        });
    }
    async delete(id, fields) {
        let client = await this.connectionPool.connectToDatabase(process.env.MONGODB_CONNECTION_STRING);
        let collection = await client.db().collection(this.collection);
        return collection
            .findOneAndDelete({ _id: id }, { projection: mongodb_utils_1.MongoDbUtils.parseFields(fields, this.private_fields) })
            .then((result) => {
            let res = result.value;
            if (res) {
                res = this.transform(res);
            }
            return res;
        })
            .catch((err) => {
            throw new http_error_1.HttpError(err.message, err, 500);
        });
    }
    async deleteMany(filter, fields) {
        let client = await this.connectionPool.connectToDatabase(process.env.MONGODB_CONNECTION_STRING);
        let collection = await client.db().collection(this.collection);
        return collection
            .findOneAndDelete(filter, {
            projection: mongodb_utils_1.MongoDbUtils.parseFields(fields, this.private_fields),
        })
            .then((result) => {
            let res = result.value;
            if (res) {
                res = this.transform(res);
            }
            return res;
        })
            .catch((err) => {
            throw new http_error_1.HttpError(err.message, err, 500);
        });
    }
    getSorting(aggregate, orderBy, ctx) {
        for (let key in orderBy) {
            if (!this.includes[key])
                continue;
            let commands = this.includes[key];
            if (!commands)
                return;
            if (typeof commands === "function") {
                let _function = commands;
                commands = _function(ctx);
            }
            aggregate.push(...commands);
        }
    }
    addIncludes(aggregate, includes, ctx) {
        for (let include of new Set([...this.pre_include, ...includes])) {
            let commands = this.includes[include];
            if (!commands)
                return;
            if (typeof commands === "function") {
                let _function = commands;
                commands = _function(ctx);
            }
            aggregate.push(...commands);
        }
    }
    getAggregate(filter, includes, orderBy, ctx) {
        let aggregate = [{ $match: filter }];
        if (filter["#pre"] || filter["#post"]) {
            aggregate = [];
        }
        if (filter["#pre"])
            aggregate.push({ $match: filter["#pre"] });
        this.addIncludes(aggregate, includes, ctx || {});
        if (filter["#post"])
            aggregate.push({ $match: filter["#post"] });
        this.getSorting(aggregate, orderBy, ctx);
        console.log("Aggregate: ", aggregate);
        return aggregate;
    }
    transform(entity) {
        entity.id = entity._id;
        delete entity._id;
        return _.omit(entity, this.exclude_fields);
    }
}
exports.MongoDBService = MongoDBService;
//# sourceMappingURL=data:application/json;base64,
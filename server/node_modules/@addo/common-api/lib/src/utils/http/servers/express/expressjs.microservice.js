"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpMethod = exports.EndpointConfig = exports.ExpressJsMicroservice = void 0;
const microservice_1 = require("../../microservice");
const http_request_1 = require("../../models/http.request");
class ExpressJsMicroservice extends microservice_1.Microservice {
    constructor(config, handler) {
        super(handler);
        this.config = config;
    }
    parseRequest(request) {
        let req = new http_request_1.Request();
        req.queryStringParameters = request.query;
        req.pathParameters = request.params;
        req.headers = JSON.parse(JSON.stringify(request.headers));
        req.body = request.body;
        req.original = request;
        return new http_request_1.HttpRequest(req);
    }
    async getAHandler(request, response) {
        this.http = this.parseRequest(request);
        let result = await this.handle(this.http);
        return result;
    }
    getHandler() {
        return (request, response) => {
            this.getAHandler(request, response)
                .then(res => {
                for (let key in res.headers) {
                    response.setHeader(key, res.headers[key]);
                }
                response.status(res.statusCode).send(res.body);
            }).catch(err => {
                response.status(500).send({ code: "_GENERIC_ERROR", err, message: err.message });
            });
        };
    }
}
exports.ExpressJsMicroservice = ExpressJsMicroservice;
class EndpointConfig {
    constructor(route, method) {
        this.route = route;
        this.method = method;
    }
}
exports.EndpointConfig = EndpointConfig;
var HttpMethod;
(function (HttpMethod) {
    HttpMethod["GET"] = "get";
    HttpMethod["POST"] = "post";
    HttpMethod["PUT"] = "put";
    HttpMethod["PATCH"] = "patch";
    HttpMethod["DELETE"] = "delete";
})(HttpMethod = exports.HttpMethod || (exports.HttpMethod = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2pzLm1pY3Jvc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy91dGlscy9odHRwL3NlcnZlcnMvZXhwcmVzcy9leHByZXNzanMubWljcm9zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHFEQUFrRDtBQUVsRCw0REFBaUU7QUFHakUsTUFBYSxxQkFBNEIsU0FBUSwyQkFBa0I7SUFHakUsWUFBWSxNQUFzQixFQUFFLE9BQXVEO1FBQ3pGLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxZQUFZLENBQUMsT0FBd0I7UUFDbkMsSUFBSSxHQUFHLEdBQVksSUFBSSxzQkFBTyxFQUFFLENBQUM7UUFDakMsR0FBRyxDQUFDLHFCQUFxQixHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDMUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQ3BDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzFELEdBQUcsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUN4QixHQUFHLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUN2QixPQUFPLElBQUksMEJBQVcsQ0FBSSxHQUFHLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUF3QixFQUFFLFFBQTBCO1FBQ3BFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2QyxJQUFJLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxVQUFVO1FBQ1IsT0FBTyxDQUFDLE9BQXdCLEVBQUUsUUFBMEIsRUFBRSxFQUFFO1lBQzlELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQztpQkFDaEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNWLEtBQUksSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLE9BQU8sRUFBRTtvQkFDMUIsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUMzQztnQkFDRCxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ2hELENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDYixRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1lBQ25GLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQyxDQUFBO0lBQ0gsQ0FBQztDQUVGO0FBdENELHNEQXNDQztBQUVELE1BQWEsY0FBYztJQUl6QixZQUFZLEtBQWEsRUFBRSxNQUEyQjtRQUNwRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN2QixDQUFDO0NBQ0Y7QUFSRCx3Q0FRQztBQUVELElBQVksVUFNWDtBQU5ELFdBQVksVUFBVTtJQUNwQix5QkFBVyxDQUFBO0lBQ1gsMkJBQWEsQ0FBQTtJQUNiLHlCQUFXLENBQUE7SUFDWCw2QkFBZSxDQUFBO0lBQ2YsK0JBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQU5XLFVBQVUsR0FBVixrQkFBVSxLQUFWLGtCQUFVLFFBTXJCIn0=